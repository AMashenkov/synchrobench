INSTALL
------- 
To install Synchrobench go to the root directory and type `make`.
This will compile the basic lock-based, lock-free and sequential data structures
of the C/C++ version of Synchrobench that will be located in synchrobench-c/bin/

* Transactional Memories:
  To test transaction-based version, a TM implementation must be provided.
  The easiest is to use a software library as follows:
   1. Install an STM library: 
      (e.g., http://www.it.usyd.edu.au/~gramoli/tmp/doc/sw/estm-0.3.0.tgz) 
      Compile the STM
   2. Set ./common/Makefile.common
      STM directories (e.g., ESTMDIR)
   3. Compile with E-STM using 
        make estm
  Other TM libraries are available online:
     - TinySTM   http://tmware.org/tinystm
     - SwissTM   http://lpd.epfl.ch/site/research/tmeval
     - E-STM     http://sydney.edu.au/engineering/it/~gramoli/php/estm.php

* Locks:
  Alternatively, you can directly use the lock-based versions (without using 
  any STM) by compiling the mutex or spinlock versions as follows:
     make lock 
     make spinlock

* Sequential:
  Synchrobench produces extra data structures without any synchronization 
  technique. While the produced sequential versions are not thread-safe, they 
  serve as baselines to evaluate the gain in performance of concurrent data 
  structure performance.
     make sequential

* Lock-free: 
  This corresponds to the data structure using read-modify-write for 
  synchronization. They rely exclusively on compare-and-swap or load-link/store-
  conditional and are non-blocking in that if an access backtracks, then a
  concurrent access progresses.
     make lockfree

RUN
---
   1. Executables for double-ended queue, hash table, linked list, 
      red-black tree, skip list, speculation-friendly binary search tree, 
      using no synchronization (sequential), using read-modify-write
      (lock-free), mutex, spinlock, transactional memory (ESTM)
      are located in 'bin':
      ./bin/sequential-deque
      ./bin/sequential-hashtable
      ./bin/sequential-linkedlist
      ./bin/sequential-rbtree 
      ./bin/sequential-skiplist
      ./bin/sequential-sftree
      ./bin/lockfree-hashtable
      ./bin/lockfree-linkedlist
      ./bin/lockfree-rbtree 
      ./bin/lockfree-skiplist-fraser
      ./bin/lockfree-skiplist-rotating
      ./bin/lockftree-sftree
      ./bin/MUTEX-hashtable
      ./bin/MUTEX-linkedlist
      ./bin/MUTEX-skiplist
      ./bin/SPIN-hashtable
      ./bin/SPIN-linkedlist
      ./bin/SPIN-skiplist
      ./bin/ESTM-hashtable
      ./bin/ESTM-linkedlist
      ./bin/ESTM-skiplist
      ./bin/ESTM-deque
      ./bin/ESTM-sftree
   2. Use parameter "--help" for the full list of parameters


TESTED PLATFORMS
----------------
    Synchrobench has been successfully tested on:
    1. i686
       Intel core 2 duo 
       Mac OS X
       gcc version 4.0.1 (Apple Inc. build 5490)
    2. x86_64
       2 quad-core Intel Xeon 5365 
       Linux 2.6.30-s2
       gcc version 4.3.3 (Ubuntu 4.3.3-5ubuntu4)
    3. x86_64
       4 quad-core AMD Opteron
       Linux 2.6.27.29-0.1-default 
       gcc (SUSE Linux) 4.3.2 [gcc-4_3-branch revision 141291]
    4. SPARC 
       UltraSPARC 2 
       Solaris 10
       sparc-sun-solaris2.10-gcc (GCC) 4.2.1 (20081023) (gccfss)
    5. x86_64 
       2 8-core Intel Xeon E5-2450 (2.1GHz) 
       Ubuntu 12.04.4 LTS 
       Java 1.7.0 51
       gcc 4.6.3
    6. SPRAC
       64-way UltraSPARC T2 (1.165GHz) 
       Solaris 10 (kernel architecture sun4v), 
       Java 1.7.0 05-b05
       sun-solaris2.10-gcc 4.0.4
    7. x86_64 
       4 16-core AMD Opteron 6378 (1.4GHz) 
       Fedora 18 
       Java 1.7.0 09-icedtea
       gcc 4.7.2
    